const express = require('express');
const RestaurantModel = require('../models/restaurant');

const router = express.Router();


//// middleware ////
// this code checks to see if the user is logged in using the req.session.loggedIn property. This property was defined in the controller.user.js file
// if the user is logged in, we're using the 'next' which means allows the user to access the routes defined below 
router.use((req, res, next) => {
    // req.session
    if(req.session.loggedIn){
        next();
    } else {
        res.redirect('/user/login')
    }
})


///////////////////////////////
/////////// ROUTES ////////////
///////////////////////////////

// router.get('/', (req, res) => {
//     res.send('hola world')
// })


// index route //
    router.get('/', async (req, res) => {
        const allRestaurants = await RestaurantModel.find({username: req.session.username})
    
        // console.log("req.session.username", req.session.username);

        res.render(
            './restaurants/index.ejs', 
            {restaurants: allRestaurants, user: req.session.username},
        )
    });


// new restaurant route //
    router.get('/new', (req, res) => {
        res.render('./restaurants/new.ejs')
    })

// new restaurant post route //
    router.post('/', async (req, res) => {
        // console.log("username", req.session.username);
        
        try{
            req.body.username = req.session.username;
        
            await RestaurantModel.create(req.body);

            res.redirect('/restaurants')
        } catch {
            res.send("Restaurant Name is required")
        };
    });

// edit route //
    router.get('/:id/edit', async (req, res) => {
        const id = req.params.id;
        const restaurant = await RestaurantModel.findById(id)
        res.render('./restaurants/edit.ejs', {restaurant})
    })


// edit put route //
    router.put('/:id', async (req, res) => {
        const id = req.params.id;
        // const updatedRestaurant = req.body
        // console.log({updatedRestaurant, req}, "before updated by id") saving to reference de-bugging
        await RestaurantModel.findByIdAndUpdate(id, req.body)
        // console.log(updatedResult, "after updated by id")

        res.redirect(`/restaurants/${id}`) //// MY FAVORITE LINE OF CODE /////
    })


// show a single restaurant with details
    router.get('/:id', async (req, res) => {
        const id = req.params.id;
        
        const restaurant = await RestaurantModel.findById(id);

        if(restaurant.priceRange === 3){
            restaurant.dollarPrice = "$$$"
        } else if(restaurant.priceRange === 2){
            restaurant.dollarPrice = "$$"
        } else if(restaurant.priceRange === 1){
            restaurant.dollarPrice = "$"
        } else{
            restaurant.dollarPrice = ""
        };

        res.render('./restaurants/show.ejs', {restaurant} )
    });



// delete a restaurant //
    router.delete('/:id', async (req, res) => {
        const id = req.params.id

        await RestaurantModel.findByIdAndDelete(id)
        
        res.redirect('/restaurants')
    })



module.exports = router;